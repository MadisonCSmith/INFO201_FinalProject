tas <- cbind(tas, grade.diff, deparse.level = 1)
print(tas)
colnames(new.data.frame)
grade.diff <- (math.grades - spanish.grades)
tas <- cbind(tas, grade.diff, deparse.level = 1)
print(tas)
#Create vector names with the names of the 6 TAs in the course
names <- c("Adele Miller", "Anirudh Subramanyam", "Zhanna Voloshina", "Tejveer Rai", "Bao Dinh", "Iris Sun")
#Create a vector math.grades with 6 hypothetical grades (0 - 100) in a math course (that correspond to the 6 names above). These can be whatever numbers you wish.
math.grades <- c(99, 98, 93, 88, 90, 100)
#Create a vector spanish.grades with 6 hypothetical grades (0 - 100) in a Spanish course (that correspond to the 6 names above). These can be whatever numbers you wish.
spanish.grades <- c(80, 99, 90, 94, 93, 89)
#Create a data frame variable tas by combining the three vectors.
tas <- data.frame(names, math.grades, spanish.grades)
print(tas)
#Print a sentence "The TA data frame has X rows and Y cols: COL_NAMES", replacing X with the number of rows, Y with the number of columns, and COL_NAMES with a comma-separated list of the column names.
x <- nrow(tas)
y <- ncol(tas)
col.names <- paste(colnames(tas), collapse = ', ', sep = "")
description <- paste("The TA data frame has", x, "rows and", y,"cols: ", col.names)
print(description)
#Hint: create the variable first, then print it! The paste() function's collapse argument can help when pasting vector elements into a single character string.
#Print out the row of the data frame with your TA's grades.
#rbind(tas, names,
#Add a new column grade.diff to your data frame, which has values equal to each TA's math grade minus the TA's Spanish grade.
grade.diff <- (math.grades - spanish.grades)
tas <- cbind(tas, grade.diff, deparse.level = 1)
print(tas)
print(tas)
#Add another column better.at.math as a boolean (TRUE/FALSE) variable that indicates that a TA got a better grade in math.
better.at.math <- math.grades[math.grades > spanish.grades]
tas <- cbind(tas, better.at.math, deparse.level = 1)
tas <- cbind(tas, better.at.math, deparse.level = 1)
print(tas)
print(better.at.math)
#Add another column better.at.math as a boolean (TRUE/FALSE) variable that indicates that a TA got a better grade in math.
better.at.math <- math.grades > spanish
#Add another column better.at.math as a boolean (TRUE/FALSE) variable that indicates that a TA got a better grade in math.
better.at.math <- math.grades > spanish.grades
print(better.at.math)
tas <- cblind(tas, better.at.math, deparse.level = 1)
tas <- cbind(tas, better.at.math, deparse.level = 1)
print(tas)
grade.diff <- (math.grades - spanish.grades)
tas <- cbind(tas, grade.diff, deparse.level = 1)
print(tas)
#Add another column better.at.math as a boolean (TRUE/FALSE) variable that indicates that a TA got a better grade in math.
better.at.math <- math.grades > spanish.grades
print(better.at.math)
tas <- cbind(tas, better.at.math, deparse.level = 1)
print(tas)
#################
# Your script for Part 1 goes here (and delete this comment!)
#Create vector names with the names of the 6 TAs in the course
names <- c("Adele Miller", "Anirudh Subramanyam", "Zhanna Voloshina", "Tejveer Rai", "Bao Dinh", "Iris Sun")
#Create a vector math.grades with 6 hypothetical grades (0 - 100) in a math course (that correspond to the 6 names above). These can be whatever numbers you wish.
math.grades <- c(99, 98, 93, 88, 90, 100)
#Create a vector spanish.grades with 6 hypothetical grades (0 - 100) in a Spanish course (that correspond to the 6 names above). These can be whatever numbers you wish.
spanish.grades <- c(80, 99, 90, 94, 93, 89)
#Create a data frame variable tas by combining the three vectors.
tas <- data.frame(names, math.grades, spanish.grades)
print(tas)
#Print a sentence "The TA data frame has X rows and Y cols: COL_NAMES", replacing X with the number of rows, Y with the number of columns, and COL_NAMES with a comma-separated list of the column names.
x <- nrow(tas)
y <- ncol(tas)
col.names <- paste(colnames(tas), collapse = ', ', sep = "")
description <- paste("The TA data frame has", x, "rows and", y,"cols: ", col.names)
print(description)
#Hint: create the variable first, then print it! The paste() function's collapse argument can help when pasting vector elements into a single character string.
#Print out the row of the data frame with your TA's grades.
#rbind(tas, names,
#Add a new column grade.diff to your data frame, which has values equal to each TA's math grade minus the TA's Spanish grade.
grade.diff <- (math.grades - spanish.grades)
tas <- cbind(tas, grade.diff, deparse.level = 1)
print(tas)
#Add another column better.at.math as a boolean (TRUE/FALSE) variable that indicates that a TA got a better grade in math.
better.at.math <- math.grades > spanish.grades
print(better.at.math)
tas <- cbind(tas, better.at.math, deparse.level = 1)
print(tas)
#Create a variable num.better.at.math that is the count of how many TAs are better at math. Print out this variable.
num.better.at.math <- nchar(better.at.math, type = "TRUE)
print(num.better.at.math)
install.packages("httr")  # once per machine
library("httr")
query <- https://api.propublica.org/congress/{version}/
GET(url = query)
query <- https://api.propublica.org/congress/{version}/
GET(url = query)
library("httr")
query <- https://api.propublica.org/congress/{version}/
GET(url = query)
install.packages("httr")  # once per machine
install.packages("httr")
library("httr")
query <- https://api.propublica.org/congress/{version}/
GET(url = query)
query <- "https://api.propublica.org/congress/{version}/"
GET(url = query)
out <- GET(url = query)
http_status(out)
api.key <- "663lZtOtTNxVsYLYaBBiY4XM9hPkm9JsdCYtVLVl"
source('apiKeys.R')
print(api.key)
query <- "https://api.propublica.org/congress/{version}/"
out <- GET(url = query)
http_status(out)
out <- GET("https://api.propublica.org/congress/{version}/", query = query.params)
query.params <- list("X-API-Key" = api.key)
out <- GET("https://api.propublica.org/congress/{version}/", query = query.params)
http_status(out)
query.params <- list(X-API-Key = api.key)
out <- GET("https://api.propublica.org/congress/{version}/", query = query.params)
query.params <- list(q = api.key)
out <- GET("https://api.propublica.org/congress/{version}/", query = query.params)
http_status(out)
response <- GET(https://api.propublica.org/congress/{version}/, add_headers('X-API-Key' = propublica.key))
response <- GET("https://api.propublica.org/congress/{version}/", add_headers('X-API-Key' = propublica.key))
query.params <- list(q = api.key)
response <- GET("https://api.propublica.org/congress/{version}/", add_headers('X-API-Key' = api.key))
http_status(out)
response <- GET("https://api.propublica.org/congress/v1/", add_headers('X-API-Key' = api.key))
http_status(out)
source('apiKeys.R')
print(api.key)
response <- GET("https://api.propublica.org/congress/v1/", add_headers('X-API-Key' = api.key))
http_status(out)
curl "api_endpoint_here"
library("httr")
source('apiKeys.R')
print(api.key)
response <- GET("https://api.propublica.org/congress/v1/", add_headers('X-API-Key' = api.key))
http_status(out)
print(response)
response <- GET("https://api.propublica.org/congress/v1/", add_headers('X-API-Key' = api.key))
print(response)
response <- GET("https://api.propublica.org/congress/v1/", add_headers('X-API-Key' = api.key))
print(response)
print(api.key)
response <- GET("https://api.propublica.org/congress/v1/", add_headers('X-API-Key' = "663lZtOtTNxVsYLYaBBiY4XM9hPkm9JsdCYtVLVl"))
print(response)
response <- GET("https://api.propublica.org/congress/v1/", add_headers('X-API-Key' = 663lZtOtTNxVsYLYaBBiY4XM9hPkm9JsdCYtVLVl))
print(response)
response <- GET("https://api.propublica.org/congress/v1/", add_headers('X-API-Key' = '663lZtOtTNxVsYLYaBBiY4XM9hPkm9JsdCYtVLVl'))
print(response)
add_headers('X-API-Key' = api.key)
response <- GET("https://api.propublica.org/congress/v1/", add_headers('X-API-Key' = api.key))
print(response)
add_headers('X-API-Key' = api.key)
response <- GET("https://api.propublica.org/congress/v1/")
print(response)
response <- GET("https://api.propublica.org/congress/v1/", add_headers('X-API-Key' = api.key))
add_headers('X-API-Key' = api.key)
print(response)
install.packages("httr")  # once per machine
library("httr")
source('apiKeys.R')
print(api.key)
response <- GET("https://api.propublica.org/congress/v1/", add_headers('X-API-Key' = api.key))
print(response)
install.packages("httr")  # once per machine
install.packages("httr")
library("httr")
source('apiKeys.R')
print(api.key)
response <- GET("https://api.propublica.org/congress/v1/", add_headers('X-API-Key' = api.key))
print(response)
response <- GET("https://api.propublica.org/congress/v1/bills/search.json?query={query}", add_headers('X-API-Key' = api.key))
print(response)
response <- GET("https://api.propublica.org/congress/v1/115/both/bills/active.json", add_headers('X-API-Key' = api.key))
print(response)
response <- GET("https://api.propublica.org/congress/v1/115/both/bills.json", add_headers('X-API-Key' = api.key))
print(response)
response <- GET("https://api.propublica.org/congress/v1/115/house/bills/introduced.json", add_headers('X-API-Key' = api.key))
print(response)
body <- content(response, "text")
install.packages("jsonlite")
library("jsonlite")
repos <- fromJSON(body)
View(repos)
is.data.frame(repos)
str(body)
names(body)
items <- body$items
str(body)
names(body)
results <- body$results
str(repos)
names(repos)
results <- repos$results
str(results)
bills <- results$bills
str(bils)
str(bills)
bill.info <- bills$[[1]]
bill.info <- bills[[1]]
str(bill.info)
names(bill.info)
bills.info <- bills[[1]]
str(bills.info)
names(bills.info)
is.data.frame(bills.info)
test <- flatten(bills.info)
View(test)
View(test)
new.table <- select(test, bill_id, short_title, sponsor_party, sponsor_state, sponsor_name, active, latest_major_action, bill_uri)
library(dplyr)
new.table <- select(test, bill_id, short_title, sponsor_party, sponsor_state, sponsor_name, active, latest_major_action, bill_uri)
View(new.table)
new.table <- select(test, bill_id, short_title, sponsor_party, sponsor_state, sponsor_name, active, latest_major_action, bill_uri) %>%
filter(top_n(5))
new.table <- select(test, bill_id, short_title, sponsor_party, sponsor_state, sponsor_name, active, latest_major_action, bill_uri) %>%
filter(slice(1:5)))
new.table <- select(test, bill_id, short_title, sponsor_party, sponsor_state, sponsor_name, active, latest_major_action, bill_uri) %>%
filter(slice(1:5))
new.table <- select(test, bill_id, short_title, sponsor_party, sponsor_state, sponsor_name, active, latest_major_action, bill_uri) %>%
filter(slice(1:5))
new.table <- select(test, bill_id, short_title, sponsor_party, sponsor_state, sponsor_name, active, latest_major_action, bill_uri) %>%
filter(slice(1))
new.table <- select(test, bill_id, short_title, sponsor_party, sponsor_state, sponsor_name, active, latest_major_action, bill_uri) %>%
filter(slice(1:10))
new.table <- select(test, bill_id, short_title, sponsor_party, sponsor_state, sponsor_name, active, latest_major_action, bill_uri) %>%
filter(row_number() <= 5)
response.votes <- GET("GET https://api.propublica.org/congress/v1/house/votes/recent.json"),add_headers('X-API-Key' = api.key)
response.votes <- GET("https://api.propublica.org/congress/v1/house/votes/recent.json", add_headers('X-API-Key' = api.key))
print(response.votes)
body.votes <- content(response, "text")
repos.votes <- fromJSON(body)
repos.votes <- fromJSON(body.votes)
is.data.frame(repos.votes)
str(repos.votes)
names(repos.votes)
View(repos.votes)
results.votes <- repos.votes$results
str(results.votes)
str(results.votes)
names(result.votes)
names(results.votes)
is.data.frame(results.votes)
results.votes.flatten <- flatten(results.votes)
View(results.votes.flatten)
str(results.votes)
bills.votes <- results.votes$bills
str(bills.votes)
names(bills.votes)
View(bills.votes)
bills.votes.info <- bills.votes[1]
str(bills.votes.info)
names(bills.votes.info)
bills.votes.info <- bills.votes[1]
str(bills.votes.info)
names(bills.votes.info)
View(bill.info)
############# votes
response.votes <- GET("https://api.propublica.org/congress/v1/senate/votes/recent.json", add_headers('X-API-Key' = api.key))
print(response.votes)
body.votes <- content(response, "text")
repos.votes <- fromJSON(body.votes)
is.data.frame(repos.votes)
str(repos.votes)
names(repos.votes)
results.votes <- repos.votes$results
str(results.votes)
bills.votes <- results.votes$bills
str(bills.votes)
names(bills.votes)
bills.votes.info <- bills.votes[1]
str(bills.votes.info)
names(bills.votes.info)
View(bills.votes)
names(bills.votes)
View(bills.votes.info)
bills.votes.info <- bills.votes[[1]]
str(bills.votes.info)
names(bills.votes.info)
is.data.frame(bills.votes.info)
bills.flatten <- flatten(bills.votes.info)
View(bills.flatten)
str(repos.votes)
names(repos.votes)
results.votes <- repos.votes$results
str(results.votes)
bills.votes <- results.votes$bills
str(bills.votes)
names(bills.votes)
View(bills.votes)
View(bills.votes.info)
############# votes
response.votes <- GET("https://api.propublica.org/congress/v1/senate/votes/recent.json", add_headers('X-API-Key' = api.key))
print(response.votes)
body.votes <- content(response, "text")
repos.votes <- fromJSON(body.votes)
View(repos.votes)
############# votes
response.votes <- GET("https://api.propublica.org/congress/v1/senate/votes/recent.json", add_headers('X-API-Key' = api.key))
print(response.votes)
body.votes <- content(response, "text")
repos.votes <- fromJSON(body.votes)
View(repos.votes)
############# votes
response.votes <- GET("https://api.propublica.org/congress/v1/senate/votes/recent.json", add_headers('X-API-Key' = api.key))
print(response.votes)
body.votes <- content(response.votes, "text")
repos.votes <- fromJSON(body.votes)
View(repos.votes)
is.data.frame(repos.votes)
str(repos.votes)
names(repos.votes)
results.votes <- repos.votes$results
str(results.votes)
bills.votes <- results.votes$bills
results.votes <- results.votes$results
str(results.votes)
names(results.votes)
results.votes <- results.votes$results
str(results.votes)
names(results.votes)
View(results.votes.flatten)
str(repos.votes)
names(repos.votes)
results.votes <- results.votes$results
str(results.votes)
names(repos.votes)
results.votes <- repos.votes$results
str(results.votes)
names(results.votes)
votes.info <- results.votes[[1]]
str(votes.info)
names(votes.info)
votes.info <- results.votes[[1]]
View(results.votes)
results.votes <- repos.votes$votes
str(results.votes)
names(results.votes)
results.votes <- repos.votes$results
str(results.votes)
names(results.votes)
votes.info <- results.votes
str(votes.info)
names(votes.info)
View(votes.info)
votes.info <- results.votes$votes
str(votes.info)
names(votes.info)
is.data.frame(votes.info)
bills.flatten <- flatten(votes.info)
votes.flatten <- flatten(votes.info)
View(votes.flatten)
install("ggplot2")
library("ggplot2")
# Loads the httr, dplyr, knitr, ggplot2, and DescTools packages.
library("httr")
library("dplyr")
install.packages("knitr")
library(knitr)
install.packages("ggplot2")
install.packages("shiny")
library(shiny)
library(shiny)
my.ui <- fluidPage(
h1("Hello Shiny"),
textInput('user.name', label="What is your name?")
)
shinyApp(ui = my.ui, server = my.server)
my.server <- function(input, output) {
}
shinyApp(ui = my.ui, server = my.server)
runApp('Desktop')
my.ui <- fluidPage(
h1("Hello Shiny"),
textInput('user.name', label="What is your name?")
textInput('text.key', label = "Enter Text")
)
my.ui <- fluidPage(
h1("Hello Shiny"),
textInput('user.name', label="What is your name?"),
textInput('text.key', label = "Enter Text")
)
runApp('Desktop')
,
textInput('text.key', label = "Enter Text")
my.ui <- fluidPage(
h1("Hello Shiny"),
textInput('user.name', label="What is your name?"),
textInput('text.key', label = "Enter Text")
)
runApp('Desktop')
print(input$user.name)
my.server <- function(input, output) {
print(input$user.name)
}
shinyApp(ui = my.ui, server = my.server)
blah22 <- unique(my.data)
my.data <- read.csv('./data/globalterrorism.csv',
stringsAsFactors=FALSE)
my.data <- arrange(my.data, country_txt)
library(shiny)
library(dplyr)
library(ggplot2)
library(maps)
library(mapproj)
setwd("~/Desktop/INFO201_FinalProject")
my.data <- read.csv('./data/globalterrorism.csv',
stringsAsFactors=FALSE)
test1 <- select(my.data, country_txt) %>%
unique()
View(test1)
test1 <- select(my.data, country_txt) %>%
unique() %>% sort()
test1 <- select(my.data, country_txt) %>%
unique() %>% sort(country_txt)
test1 <- select(my.data, country_txt) %>%
unique() %>%
sort(country_txt)
View(test1)
# reads in csv data
my.data <- read.csv('./data/globalterrorism.csv',
stringsAsFactors=FALSE)
# reads in csv data
my.data <- read.csv('./data/globalterrorism.csv',
stringsAsFactors=FALSE)
View(my.data)
hannah.vector <- my.data[,country_txt]
runApp()
source("server.R")
hannah.vector <- my.data[,country_txt]
hannah.vector <- my.data[, country_txt]
View(my.data)
hannah.vector <- my.data[country_txt,]
hannah.vector <- my.data[, country_txt]
hannah.vector <- my.data[country_txt,]
hannah.vector <- my.data[,country_txt]
View(my.data)
hl.q5.data <- select(my.data, iyear, country_txt, region, latitude, longitude)  %>%
filter(country_txt != "United States") %>%
unique()
hl.q5.data <- select(my.data, iyear, country_txt)  %>%
filter(country_txt != "United States") %>%
unique()
hannah.vector <- sort(hl.q5.data[, "country_txt"])
ui <- navbarPage("Global Terrorism",
# code for the overview tab
tabPanel("Overview",
titlePanel("Trends in Global Terrorism Over Time"),
textOutput("overview")
),
tabPanel("Hannah",
sidebarLayout(
sidebarPanel(
selectInput('country', "Select the country you would like to compare to",
choice = hannah.vector),
sliderInput("years", "Select the desired year",
min=1970, max=2016, value = 1991, step = 1)
),
mainPanel(
br(),
p("The bar plot below will answer the question above depending on the country
and year that is picked. The bar graph will always show the United States data
however, the compared country will change."),
plotOutput("bar"),
br(),
p("As you can see, the data is always change according to the year and country.
It is interesting to see the frequency of terrorist attack across country and year
compared to the United States. There are trends of terrorist attack depending on
year and country that reflect the state of country.")
)
)
),
# all Mady's ui code
tabPanel("Change in Frequency",
h2(" Have terrorist attacks increased in frequency over the past forty-some years?"),
# creates two columns
sidebarLayout(
# creates left columns with widgets
sidebarPanel(
# creates a radio buttom widget
radioButtons("unit", "Group attacks by unit of time:",
c("year" = "iyear",
"month" = "imonth",
"day" = "iday")),
br(),
# creates a text input widget
textInput("startyear",
"Start year (1970 - 2016)",
value = "1970",
width = NULL,
placeholder = NULL),
br(),
# creates another text input widget
textInput("endyear",
"End year (1970 - 2016)",
value = "2016",
width = NULL,
placeholder = NULL),
br()
),
# creates the right column with the chart
mainPanel(
textOutput("mady"),
plotOutput("alsomady"),
textOutput("anothermady")
)
)
)
)
runApp()
runApp()
setwd("~/Desktop/INFO201_FinalProject")
runApp()
source(server.R)
runApp()
runApp()
